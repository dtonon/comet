// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notes.sql

package db

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one

INSERT INTO notes (status_id, notebook_id, content, title, created_at, modified_at, published_at, published_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, status_id, notebook_id, content, title, created_at, modified_at, published_at, published_id
`

type CreateNoteParams struct {
	StatusID    sql.NullInt64
	NotebookID  sql.NullInt64
	Content     string
	Title       string
	CreatedAt   string
	ModifiedAt  string
	PublishedAt sql.NullString
	PublishedID sql.NullString
}

// Note Queries
func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote,
		arg.StatusID,
		arg.NotebookID,
		arg.Content,
		arg.Title,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.PublishedAt,
		arg.PublishedID,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.StatusID,
		&i.NotebookID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.PublishedAt,
		&i.PublishedID,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, status_id, notebook_id, content, title, created_at, modified_at, published_at, published_id
FROM notes
WHERE id = ?
`

func (q *Queries) GetNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.StatusID,
		&i.NotebookID,
		&i.Content,
		&i.Title,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.PublishedAt,
		&i.PublishedID,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, status_id, notebook_id, content, title, created_at, modified_at, published_at, published_id
FROM notes
`

func (q *Queries) ListNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.StatusID,
			&i.NotebookID,
			&i.Content,
			&i.Title,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.PublishedAt,
			&i.PublishedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET status_id = ?, notebook_id = ?, content = ?, title = ?, modified_at = ?, published_at = ?, published_id = ?
WHERE id = ?
`

type UpdateNoteParams struct {
	StatusID    sql.NullInt64
	NotebookID  sql.NullInt64
	Content     string
	Title       string
	ModifiedAt  string
	PublishedAt sql.NullString
	PublishedID sql.NullString
	ID          int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote,
		arg.StatusID,
		arg.NotebookID,
		arg.Content,
		arg.Title,
		arg.ModifiedAt,
		arg.PublishedAt,
		arg.PublishedID,
		arg.ID,
	)
	return err
}
